From a1cc54aaa09853015d3130cae6cfb5273b6ec95d Mon Sep 17 00:00:00 2001
From: Gregers Rygg <gregersrygg@gmail.com>
Date: Wed, 2 Oct 2013 13:51:38 +0200
Subject: [PATCH] initial commit

---
 src/log/appender/banner.js  | 112 ++++++++++++++++++++++++++++++++++++++++
 src/log/appender/console.js |  18 +++++++
 src/log/getAppender.js      |   6 +++
 src/log/logger.js           |  66 +++++++++++++++++++++++
 4 files changed, 202 insertions(+)

diff --git a/src/log/appender/banner.js b/src/log/appender/banner.js
new file mode 100644
index 0000000..7f01e57
--- /dev/null
+++ b/src/log/appender/banner.js
@@ -0,0 +1,112 @@
+var insertCSS = require('../../style/insertCss.js');
+var outDiv = null;
+var startTime = new Date().getTime();
+var OUTPUT_ID = 'logoutput';
+
+function addOutDivToBody () {
+    if (document.body) {
+        document.body.appendChild(outDiv);
+    } else {
+        setTimeout(addOutDivToBody, 0);
+    }
+}
+
+function generateCSS() {
+    var rules = [
+        ['{',
+            'position:absolute',
+            'top:0',
+            'left:0',
+            'width:100%',
+            'height:100%',
+            'overflow:scroll',
+            'padding:10px',
+            'opacity:0.8',
+            'background-color:black',
+            'color:white',
+            'font-family:monospace',
+            'font-weight:bold',
+            'font-size:10px',
+            'z-index:9999',
+            'white-space:nowrap',
+            'border:5px solid transparent',
+            'box-sizing:border-box',
+            'background-clip:padding-box',
+            'border-radius:10px',
+        '}'].join(';'),
+        '.info {color:blue}',
+        '.warn {color:orange}',
+        '.error {color:red}'
+    ].map(function (rule) {
+        return ['#',OUTPUT_ID,' ',rule].join('');
+    });
+    insertCSS(rules.join('\n'));
+}
+
+function createOverlay () {
+    var div = document.createElement('div');
+    div.id = OUTPUT_ID;
+    return div;
+}
+
+var levelToText = {
+    1: 'ERROR',
+    2: 'WARN',
+    3: 'INFO',
+    4: 'DEBUG'
+};
+function logMessage (logObj) {
+    var level = levelToText[logObj.level];
+    var scriptErr = (logObj.url && logObj.line);
+    var out = [
+        '<span class="' + level.toLowerCase() + '">',
+        '<span class="time">', (logObj.time - startTime), ' ms</span>',
+        levelToText[logObj.level],
+        logObj.msg
+    ];
+
+    if (scriptErr) {
+        out.push.call(out, '<a href="'+logObj.url+'" target="_blank" class="script">',
+            logObj.url+':'+logObj.line, '</a>');
+    }
+    out.push('</span>');
+    return out.join(' ');
+}
+
+var timer = null;
+var docFrag = null;
+function appendLogMessage (el) {
+    clearTimeout(timer);
+    docFrag = docFrag || document.createDocumentFragment();
+    docFrag.appendChild(el);
+    timer = setTimeout(function () {
+        outDiv.appendChild(docFrag);
+        docFrag = null;
+    }, 50);
+}
+
+function logOut (logObj) {
+    if (!outDiv) {
+        outDiv = createOverlay();
+        insertCSS(generateCSS());
+        addOutDivToBody();
+    }
+    var div = document.createElement('div');
+    div.innerHTML = logMessage(logObj);
+    appendLogMessage(div);
+}
+
+logOut.reset = function () {
+    clearTimeout(timer);
+    if (outDiv) {
+        if (outDiv.parentElement) {
+            outDiv.parentElement.removeChild(outDiv);
+        }
+        outDiv = null;
+    }
+    if (docFrag) {
+        docFrag = null;
+    }
+};
+
+module.exports = logOut;
\ No newline at end of file
diff --git a/src/log/appender/console.js b/src/log/appender/console.js
new file mode 100644
index 0000000..ef42030
--- /dev/null
+++ b/src/log/appender/console.js
@@ -0,0 +1,18 @@
+var levelToText = {
+    1: 'ERROR',
+    2: 'WARN',
+    3: 'INFO',
+    4: 'DEBUG'
+};
+function log (logObj) {
+	var level = levelToText[logObj.level];
+	var str = [
+		logObj.name,
+        (logObj.time),
+        level,
+        logObj.msg,
+    ].join(' ');
+    global.console.log(str);
+}
+
+module.exports = log;
\ No newline at end of file
diff --git a/src/log/getAppender.js b/src/log/getAppender.js
new file mode 100644
index 0000000..92ff3ea
--- /dev/null
+++ b/src/log/getAppender.js
@@ -0,0 +1,6 @@
+var consoleAppender = require('./appender/console.js');
+var bannerAppender = require('./appender/banner.js');
+
+module.exports = function (logTo) {
+	return (logTo === 'console' ? consoleAppender : bannerAppender);
+};
\ No newline at end of file
diff --git a/src/log/logger.js b/src/log/logger.js
new file mode 100644
index 0000000..6b71f8a
--- /dev/null
+++ b/src/log/logger.js
@@ -0,0 +1,66 @@
+/* jshint noarg:false */
+var util = require('../utility.js');
+var CALLSTACK_MAX_DEPTH = 10;
+var FN_NAME_REGEX = /function ([\w\d\-_]+)\s*\(/;
+
+function getName(f) {
+    return f.name || (FN_NAME_REGEX.test(f.toString()) ? RegExp.$1 : '{anonymous}');
+}
+
+function makeLogFn (out, name) {
+    return function (level) {
+        return function (objOrMsg) {
+            if (typeof objOrMsg === 'string') {
+                objOrMsg = {msg: objOrMsg};
+            }
+            out( util.extend({
+                level: level,
+                name: name,
+                time: new Date().getTime()
+            }, objOrMsg) );
+        };
+    };
+}
+
+function retrieveErrorData (evt, caller) {
+    var output = {
+        msg: evt.message,
+        url: evt.filename,
+        line: evt.lineno,
+        stack: []
+    };
+    try {
+        var i = CALLSTACK_MAX_DEPTH;
+        while (caller && i--) {
+            output.stack.push(getName(caller));
+            caller = caller.caller;
+        }
+    } catch (e) {}
+    return output;
+}
+
+function create(name, strLevel, out) {
+	var level = parseInt(strLevel || '0', 10);
+    var log = makeLogFn(out, name);
+    var noop = function () {};
+    var logInstance = {
+        level: level,
+        error:  (level >= 1 ? log(1) : noop),
+        warn:   (level >= 2 ? log(2) : noop),
+        info:   (level >= 3 ? log(3) : noop),
+        debug:  (level >= 4 ? log(4) : noop),
+    };
+
+    if (level > 0) {
+        util.on('error', window, function (e) {
+            var caller = arguments.callee && arguments.callee.caller;
+            logInstance.error( retrieveErrorData(e, caller) );
+        });
+    }
+    
+    return logInstance;
+}
+
+module.exports = {
+	create: create
+};
\ No newline at end of file

From 9d2b53e1461f239f3763c335f9bb7cfed0d089fa Mon Sep 17 00:00:00 2001
From: Gregers Rygg <gregersrygg@gmail.com>
Date: Wed, 4 Dec 2013 16:44:04 +0100
Subject: [PATCH] Deleted extend methods from utility and use util-extend
 instead

---
 src/log/logger.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/log/logger.js b/src/log/logger.js
index 6b71f8a..3c1e69e 100644
--- a/src/log/logger.js
+++ b/src/log/logger.js
@@ -1,5 +1,6 @@
 /* jshint noarg:false */
 var util = require('../utility.js');
+var extend = require('util-extend');
 var CALLSTACK_MAX_DEPTH = 10;
 var FN_NAME_REGEX = /function ([\w\d\-_]+)\s*\(/;
 
@@ -13,7 +14,7 @@ function makeLogFn (out, name) {
             if (typeof objOrMsg === 'string') {
                 objOrMsg = {msg: objOrMsg};
             }
-            out( util.extend({
+            out( extend({
                 level: level,
                 name: name,
                 time: new Date().getTime()

From fccf235df0200df1d9e3bb859e0d4561cbe2e2c1 Mon Sep 17 00:00:00 2001
From: Gregers Rygg <gregersrygg@gmail.com>
Date: Thu, 5 Dec 2013 20:29:57 +0100
Subject: [PATCH] Rely on polyfill for addEventListener instead of utility.on
 to handle IE's attachEvent

---
 src/log/logger.js | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/src/log/logger.js b/src/log/logger.js
index 3c1e69e..615487d 100644
--- a/src/log/logger.js
+++ b/src/log/logger.js
@@ -1,5 +1,4 @@
 /* jshint noarg:false */
-var util = require('../utility.js');
 var extend = require('util-extend');
 var CALLSTACK_MAX_DEPTH = 10;
 var FN_NAME_REGEX = /function ([\w\d\-_]+)\s*\(/;
@@ -53,10 +52,10 @@ function create(name, strLevel, out) {
     };
 
     if (level > 0) {
-        util.on('error', window, function (e) {
+        window.addEventListener('error', function (e) {
             var caller = arguments.callee && arguments.callee.caller;
             logInstance.error( retrieveErrorData(e, caller) );
-        });
+        }, false);
     }
     
     return logInstance;

From 1cc5a590408ba65c6648a941632752e2280ab0df Mon Sep 17 00:00:00 2001
From: Gregers Rygg <gregersrygg@gmail.com>
Date: Mon, 16 Dec 2013 15:22:45 +0100
Subject: [PATCH] Use eventlistener module instead of relying on flaky polyfill
 for addEventListener. Reverting issue #13.

---
 src/log/logger.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/log/logger.js b/src/log/logger.js
index 615487d..4367a2c 100644
--- a/src/log/logger.js
+++ b/src/log/logger.js
@@ -1,5 +1,6 @@
 /* jshint noarg:false */
 var extend = require('util-extend');
+var eventListener = require('eventlistener');
 var CALLSTACK_MAX_DEPTH = 10;
 var FN_NAME_REGEX = /function ([\w\d\-_]+)\s*\(/;
 
@@ -52,7 +53,7 @@ function create(name, strLevel, out) {
     };
 
     if (level > 0) {
-        window.addEventListener('error', function (e) {
+        eventListener.add(window, 'error', function (e) {
             var caller = arguments.callee && arguments.callee.caller;
             logInstance.error( retrieveErrorData(e, caller) );
         }, false);
