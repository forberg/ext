From a1cc54aaa09853015d3130cae6cfb5273b6ec95d Mon Sep 17 00:00:00 2001
From: Gregers Rygg <gregersrygg@gmail.com>
Date: Wed, 2 Oct 2013 13:51:38 +0200
Subject: [PATCH] initial commit

---
 test/log/appender/banner.test.js | 45 ++++++++++++++++++++++++
 test/log/getAppender.test.js     | 13 +++++++
 test/log/logger.test.js          | 64 +++++++++++++++++++++++++++++++++++
 3 files changed, 122 insertions(+)

diff --git a/test/log/appender/banner.test.js b/test/log/appender/banner.test.js
new file mode 100644
index 0000000..a600972
--- /dev/null
+++ b/test/log/appender/banner.test.js
@@ -0,0 +1,45 @@
+var logToBanner = require('../../../../src/lib/log/appender/banner.js');
+describe('logToBanner', function () {
+	var logObj = {
+		msg: 'test log',
+		time: new Date().getTime(),
+		level: 4,
+		name: 'testName'
+	};
+
+	afterEach(function () {
+		logToBanner.reset();
+	});
+	
+	it('should render an overlay the first time it\'s called', function () {
+		logToBanner(logObj);
+		var output = document.getElementById('logoutput');
+		expect(output).not.toBeNull();
+	});
+
+	it('should output a div for each log message', function () {
+		jasmine.Clock.useMock();
+		logToBanner(logObj);
+		var output = document.getElementById('logoutput');
+		jasmine.Clock.tick(51);
+		expect(output.children.length).toEqual(1);
+		expect(output.children[0].textContent).toContain(logObj.msg);
+	});
+
+	it('should include script url and line for script errors', function () {
+		jasmine.Clock.useMock();
+		var errObj = {
+			msg: 'Uncaught SyntaxError: Test',
+			time: new Date().getTime(),
+			level: 1,
+			url: 'http://pastiestest.com/scripterror.js',
+			line: 123,
+			stack: []
+		};
+		logToBanner(errObj);
+		var output = document.getElementById('logoutput');
+		jasmine.Clock.tick(51);
+		expect(output.children.length).toEqual(1);
+		expect(output.children[0].textContent).toContain(errObj.url + ':' + errObj.line);
+	});
+});
\ No newline at end of file
diff --git a/test/log/getAppender.test.js b/test/log/getAppender.test.js
new file mode 100644
index 0000000..cee3b34
--- /dev/null
+++ b/test/log/getAppender.test.js
@@ -0,0 +1,13 @@
+var consoleAppender = require('../../../src/lib/log/appender/console.js');
+var bannerAppender = require('../../../src/lib/log/appender/banner.js');
+var getAppender = require('../../../src/lib/log/getAppender.js');
+
+describe('getAppender', function () {
+	it('should default to bannerAppender', function () {
+		expect(getAppender()).toEqual(bannerAppender);
+	});
+
+	it('should return consoleAppender for logTo \'console\'', function () {
+		expect(getAppender('console')).toEqual(consoleAppender);
+	});
+});
\ No newline at end of file
diff --git a/test/log/logger.test.js b/test/log/logger.test.js
new file mode 100644
index 0000000..0920167
--- /dev/null
+++ b/test/log/logger.test.js
@@ -0,0 +1,64 @@
+var logger = require('../../../src/lib/log/logger.js');
+var helper = require('../../testHelpers.js');
+var ErrorEvent = window.ErrorEvent || require('../../lib/ErrorEvent.js');
+
+describe('logger', function () {
+	it('should default logLevel to 0 if not undefined', function () {
+        var log = logger.create('no_loglevel_test', undefined, function () {});
+        expect(log.level).toEqual(0);
+    });
+
+    it('should set logLevel when specified', function () {
+        var log = logger.create('logLevel_test', '3', function () {});
+        expect(log.level).toEqual(3);
+    });
+
+    it('should not send log message when logLevel is 0', function () {
+        var logData = [];
+        var out = function (obj) {
+            logData.push(obj);
+        };
+        var log = logger.create('no_log_call', '0', out);
+        log.debug('test');
+        expect(logData.length).toEqual(0);
+    });
+
+    it('should send log message when logLevel is high enough', function () {
+        var logData = [];
+        var log = logger.create('log_debug_test', '4', function (obj) {
+            logData.push(obj);
+        });
+        var startTime = new Date().getTime();
+        log.debug('test');
+        expect(logData.length).toEqual(1);
+        expect(logData[0].msg).toEqual('test');
+        expect(logData[0].level).toEqual(4);
+        expect(logData[0].name).toEqual('log_debug_test');
+        expect(logData[0].time).not.toBeLessThan(startTime);
+    });
+
+    it('should catch errors', function () {
+        var logData = [];
+        logger.create('error_test', '1', function (obj) {
+            logData.push(obj);
+        });
+        var errorData = {
+            message: 'Test error',
+            filename: 'http://pastiestest.com/errorTest.js',
+            lineno: 123
+        };
+        var restoreOnError = helper.undefine(window, 'onerror');
+        var evt = new ErrorEvent('error', errorData);
+        window.dispatchEvent(evt);
+        restoreOnError();
+        
+        expect(logData.length).toEqual(1);
+        var logObj = logData[0];
+        expect(logObj.msg).toEqual(errorData.message);
+        expect(logObj.level).toEqual(1);
+        expect(logObj.name).toEqual('error_test');
+        expect(logObj.time).not.toBeUndefined();
+        expect(logObj.url).toEqual(errorData.filename);
+        expect(logObj.line).toEqual(errorData.lineno);
+    });
+});
\ No newline at end of file

From 23c25dc7612c5d570d17ac95b4200b100fbf4699 Mon Sep 17 00:00:00 2001
From: leftieFriele <leftie.friele@gmail.com>
Date: Fri, 6 Dec 2013 17:43:07 +0100
Subject: [PATCH] project name change, it is now called gardr

---
 test/log/appender/banner.test.js | 2 +-
 test/log/logger.test.js          | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/test/log/appender/banner.test.js b/test/log/appender/banner.test.js
index a600972..e2398df 100644
--- a/test/log/appender/banner.test.js
+++ b/test/log/appender/banner.test.js
@@ -32,7 +32,7 @@ describe('logToBanner', function () {
 			msg: 'Uncaught SyntaxError: Test',
 			time: new Date().getTime(),
 			level: 1,
-			url: 'http://pastiestest.com/scripterror.js',
+			url: 'http://gardrtest.com/scripterror.js',
 			line: 123,
 			stack: []
 		};
diff --git a/test/log/logger.test.js b/test/log/logger.test.js
index 0920167..0d50d24 100644
--- a/test/log/logger.test.js
+++ b/test/log/logger.test.js
@@ -44,7 +44,7 @@ describe('logger', function () {
         });
         var errorData = {
             message: 'Test error',
-            filename: 'http://pastiestest.com/errorTest.js',
+            filename: 'http://gardrtest.com/errorTest.js',
             lineno: 123
         };
         var restoreOnError = helper.undefine(window, 'onerror');

From f20aff4c3cb60d7ab3f74e1e7a14805c6c663efa Mon Sep 17 00:00:00 2001
From: Gregers Rygg <gregersrygg@gmail.com>
Date: Thu, 19 Dec 2013 14:03:36 +0100
Subject: [PATCH] Async tests in Jasmine are too fragile. Replaced Jasmine with
 Mocha, Chai and sinon. Fixed the tests that wasn't working, but Jasmine
 didn't catch. Fixed the implementation in manager that didn't call the
 callbacks (with the error) when items failed

---
 test/log/appender/banner.test.js | 22 +++++++++++++---------
 test/log/getAppender.test.js     |  4 ++--
 test/log/logger.test.js          | 30 +++++++++++++++---------------
 3 files changed, 30 insertions(+), 26 deletions(-)

diff --git a/test/log/appender/banner.test.js b/test/log/appender/banner.test.js
index e2398df..c74c369 100644
--- a/test/log/appender/banner.test.js
+++ b/test/log/appender/banner.test.js
@@ -6,28 +6,32 @@ describe('logToBanner', function () {
 		level: 4,
 		name: 'testName'
 	};
+	var clock;
+
+	beforeEach(function () {
+		clock = sinon.useFakeTimers();
+	});
 
 	afterEach(function () {
 		logToBanner.reset();
+		clock.restore();
 	});
 	
 	it('should render an overlay the first time it\'s called', function () {
 		logToBanner(logObj);
 		var output = document.getElementById('logoutput');
-		expect(output).not.toBeNull();
+		expect(output).to.exist;
 	});
 
 	it('should output a div for each log message', function () {
-		jasmine.Clock.useMock();
 		logToBanner(logObj);
 		var output = document.getElementById('logoutput');
-		jasmine.Clock.tick(51);
-		expect(output.children.length).toEqual(1);
-		expect(output.children[0].textContent).toContain(logObj.msg);
+		clock.tick(51);
+		expect(output.children.length).to.equal(1);
+		expect(output.children[0].textContent).to.have.string(logObj.msg);
 	});
 
 	it('should include script url and line for script errors', function () {
-		jasmine.Clock.useMock();
 		var errObj = {
 			msg: 'Uncaught SyntaxError: Test',
 			time: new Date().getTime(),
@@ -38,8 +42,8 @@ describe('logToBanner', function () {
 		};
 		logToBanner(errObj);
 		var output = document.getElementById('logoutput');
-		jasmine.Clock.tick(51);
-		expect(output.children.length).toEqual(1);
-		expect(output.children[0].textContent).toContain(errObj.url + ':' + errObj.line);
+		clock.tick(51);
+		expect(output.children.length).to.equal(1);
+		expect(output.children[0].textContent).to.have.string(errObj.url + ':' + errObj.line);
 	});
 });
\ No newline at end of file
diff --git a/test/log/getAppender.test.js b/test/log/getAppender.test.js
index cee3b34..aee1f97 100644
--- a/test/log/getAppender.test.js
+++ b/test/log/getAppender.test.js
@@ -4,10 +4,10 @@ var getAppender = require('../../../src/lib/log/getAppender.js');
 
 describe('getAppender', function () {
 	it('should default to bannerAppender', function () {
-		expect(getAppender()).toEqual(bannerAppender);
+		expect(getAppender()).to.equal(bannerAppender);
 	});
 
 	it('should return consoleAppender for logTo \'console\'', function () {
-		expect(getAppender('console')).toEqual(consoleAppender);
+		expect(getAppender('console')).to.equal(consoleAppender);
 	});
 });
\ No newline at end of file
diff --git a/test/log/logger.test.js b/test/log/logger.test.js
index 0d50d24..a49f661 100644
--- a/test/log/logger.test.js
+++ b/test/log/logger.test.js
@@ -5,12 +5,12 @@ var ErrorEvent = window.ErrorEvent || require('../../lib/ErrorEvent.js');
 describe('logger', function () {
 	it('should default logLevel to 0 if not undefined', function () {
         var log = logger.create('no_loglevel_test', undefined, function () {});
-        expect(log.level).toEqual(0);
+        expect(log.level).to.equal(0);
     });
 
     it('should set logLevel when specified', function () {
         var log = logger.create('logLevel_test', '3', function () {});
-        expect(log.level).toEqual(3);
+        expect(log.level).to.equal(3);
     });
 
     it('should not send log message when logLevel is 0', function () {
@@ -20,7 +20,7 @@ describe('logger', function () {
         };
         var log = logger.create('no_log_call', '0', out);
         log.debug('test');
-        expect(logData.length).toEqual(0);
+        expect(logData.length).to.equal(0);
     });
 
     it('should send log message when logLevel is high enough', function () {
@@ -30,11 +30,11 @@ describe('logger', function () {
         });
         var startTime = new Date().getTime();
         log.debug('test');
-        expect(logData.length).toEqual(1);
-        expect(logData[0].msg).toEqual('test');
-        expect(logData[0].level).toEqual(4);
-        expect(logData[0].name).toEqual('log_debug_test');
-        expect(logData[0].time).not.toBeLessThan(startTime);
+        expect(logData.length).to.equal(1);
+        expect(logData[0].msg).to.equal('test');
+        expect(logData[0].level).to.equal(4);
+        expect(logData[0].name).to.equal('log_debug_test');
+        expect(logData[0].time).not.to.be.lessThan(startTime);
     });
 
     it('should catch errors', function () {
@@ -52,13 +52,13 @@ describe('logger', function () {
         window.dispatchEvent(evt);
         restoreOnError();
         
-        expect(logData.length).toEqual(1);
+        expect(logData.length).to.equal(1);
         var logObj = logData[0];
-        expect(logObj.msg).toEqual(errorData.message);
-        expect(logObj.level).toEqual(1);
-        expect(logObj.name).toEqual('error_test');
-        expect(logObj.time).not.toBeUndefined();
-        expect(logObj.url).toEqual(errorData.filename);
-        expect(logObj.line).toEqual(errorData.lineno);
+        expect(logObj.msg).to.equal(errorData.message);
+        expect(logObj.level).to.equal(1);
+        expect(logObj.name).to.equal('error_test');
+        expect(logObj.time).not.to.be.undefined;
+        expect(logObj.url).to.equal(errorData.filename);
+        expect(logObj.line).to.equal(errorData.lineno);
     });
 });
\ No newline at end of file

From 728cf8ef991eaac3087d5c261c61afb56aae515b Mon Sep 17 00:00:00 2001
From: Gregers Rygg <gregersrygg@gmail.com>
Date: Tue, 14 Jan 2014 10:31:17 +0100
Subject: [PATCH] Help jshint and chai to be friends

---
 test/log/appender/banner.test.js | 1 +
 test/log/logger.test.js          | 1 +
 2 files changed, 2 insertions(+)

diff --git a/test/log/appender/banner.test.js b/test/log/appender/banner.test.js
index c74c369..c37898a 100644
--- a/test/log/appender/banner.test.js
+++ b/test/log/appender/banner.test.js
@@ -1,3 +1,4 @@
+/*jshint expr: true*/
 var logToBanner = require('../../../../src/lib/log/appender/banner.js');
 describe('logToBanner', function () {
 	var logObj = {
diff --git a/test/log/logger.test.js b/test/log/logger.test.js
index a49f661..ea0e2a1 100644
--- a/test/log/logger.test.js
+++ b/test/log/logger.test.js
@@ -1,3 +1,4 @@
+/*jshint expr: true*/
 var logger = require('../../../src/lib/log/logger.js');
 var helper = require('../../testHelpers.js');
 var ErrorEvent = window.ErrorEvent || require('../../lib/ErrorEvent.js');
