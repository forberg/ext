From a1cc54aaa09853015d3130cae6cfb5273b6ec95d Mon Sep 17 00:00:00 2001
From: leftieFriele <leftie.friele@gmail.com>
Date: Wed, 2 Oct 2013 13:51:38 +0200
Subject: [PATCH] initial commit

---
 test/lib/ErrorEvent.js | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/test/lib/ErrorEvent.js b/test/lib/ErrorEvent.js
new file mode 100644
index 0000000..7428ac2
--- /dev/null
+++ b/test/lib/ErrorEvent.js
@@ -0,0 +1,8 @@
+module.exports = function (type, extra) {
+    var event = document.createEvent('CustomEvent');
+    event.initEvent(type, false, true);
+    for (var key in (extra || {})) {
+        event[key] = extra[key];
+    }
+    return event;
+};
\ No newline at end of file

From 0f4b422d90f54440eb44a2c2000fcdce6ab6a49f Mon Sep 17 00:00:00 2001
From: sslash <michaelgunnulfsen@gmail.com>
Date: Mon, 25 Nov 2013 13:39:47 +0100
Subject: [PATCH] Changed map of banner items to be an array

---
 test/lib/Function-polyfill.js | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/test/lib/Function-polyfill.js b/test/lib/Function-polyfill.js
new file mode 100644
index 0000000..7ee930a
--- /dev/null
+++ b/test/lib/Function-polyfill.js
@@ -0,0 +1,23 @@
+if (!Function.prototype.bind) {
+  Function.prototype.bind = function (oThis) {
+    if (typeof this !== "function") {
+      // closest thing possible to the ECMAScript 5 internal IsCallable function
+      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
+    }
+
+    var aArgs = Array.prototype.slice.call(arguments, 1), 
+        fToBind = this, 
+        fNOP = function () {},
+        fBound = function () {
+          return fToBind.apply(this instanceof fNOP && oThis
+                                 ? this
+                                 : oThis,
+                               aArgs.concat(Array.prototype.slice.call(arguments)));
+        };
+
+    fNOP.prototype = this.prototype;
+    fBound.prototype = new fNOP();
+
+    return fBound;
+  };
+}
\ No newline at end of file

From fba748a2fc24dd0459e83c7bf46b6933fdca6e36 Mon Sep 17 00:00:00 2001
From: Gregers Rygg <gregersrygg@gmail.com>
Date: Fri, 29 Nov 2013 15:38:34 +0100
Subject: [PATCH] Fix jshint errors

---
 test/lib/Function-polyfill.js | 36 ++++++++++++++++++------------------
 1 file changed, 18 insertions(+), 18 deletions(-)

diff --git a/test/lib/Function-polyfill.js b/test/lib/Function-polyfill.js
index 7ee930a..60b5f42 100644
--- a/test/lib/Function-polyfill.js
+++ b/test/lib/Function-polyfill.js
@@ -1,23 +1,23 @@
 if (!Function.prototype.bind) {
-  Function.prototype.bind = function (oThis) {
-    if (typeof this !== "function") {
-      // closest thing possible to the ECMAScript 5 internal IsCallable function
-      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
-    }
+    Function.prototype.bind = function (oThis) {
+        if (typeof this !== "function") {
+            // closest thing possible to the ECMAScript 5 internal IsCallable function
+            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
+        }
 
-    var aArgs = Array.prototype.slice.call(arguments, 1), 
-        fToBind = this, 
-        fNOP = function () {},
-        fBound = function () {
-          return fToBind.apply(this instanceof fNOP && oThis
-                                 ? this
-                                 : oThis,
-                               aArgs.concat(Array.prototype.slice.call(arguments)));
-        };
+        var aArgs = Array.prototype.slice.call(arguments, 1),
+            fToBind = this,
+            fNOP = function () {},
+            fBound = function () {
+                return fToBind.apply(this instanceof fNOP && oThis
+                                     ? this
+                                     : oThis,
+                                   aArgs.concat(Array.prototype.slice.call(arguments)));
+            };
 
-    fNOP.prototype = this.prototype;
-    fBound.prototype = new fNOP();
+        fNOP.prototype = this.prototype;
+        fBound.prototype = new fNOP();
 
-    return fBound;
-  };
+        return fBound;
+    };
 }
\ No newline at end of file
